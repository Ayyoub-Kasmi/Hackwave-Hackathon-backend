generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model public_Absence {
  student_email  String         @db.VarChar(255)
  public_Student public_Student @relation(fields: [student_email], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Absence_fk0")

  @@map("public.Absence")
  @@ignore
}

model public_Document {
  url            String         @id(map: "Document_pk") @db.VarChar(255)
  name           String         @db.VarChar(255)
  owner          String         @db.VarChar(255)
  public_Student public_Student @relation(fields: [owner], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Document_fk0")

  @@map("public.Document")
}

model public_Group {
  name                 String                 @id(map: "Group_pk") @db.VarChar(255)
  size                 Int                    @default(0)
  public_Session       public_Session[]
  public_Student       public_Student[]
  public_Teacher_Group public_Teacher_Group[]

  @@map("public.Group")
}

model public_Parent {
  email                 String                  @id(map: "Parent_pk") @db.VarChar(255)
  name                  String                  @db.VarChar(255)
  password              String                  @db.VarChar(255)
  public_ParentDocument public_ParentDocument[]
  public_Student        public_Student[]

  @@map("public.Parent")
}

model public_ParentDocument {
  url           String        @id(map: "ParentDocument_pk") @db.VarChar(255)
  name          String        @db.VarChar(255)
  owner         String        @db.VarChar(255)
  public_Parent public_Parent @relation(fields: [owner], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "ParentDocument_fk0")

  @@map("public.ParentDocument")
}

model public_Session {
  group_id       String         @db.VarChar(255)
  subject_id     String         @db.VarChar(255)
  time           DateTime       @db.Timestamp(6)
  room           String         @db.VarChar(255)
  UUID           String         @db.VarChar(255)
  public_Group   public_Group   @relation(fields: [group_id], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Session_fk0")
  public_Subject public_Subject @relation(fields: [subject_id], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "Session_fk1")

  @@id([group_id, subject_id, time], map: "Session_pk")
  @@map("public.Session")
}

model public_Student {
  email           String            @id(map: "Student_pk") @db.VarChar(255)
  name            String            @db.VarChar(255)
  password        String            @db.VarChar(255)
  gender          String            @db.VarChar(255)
  major           String            @db.VarChar(255)
  parent          String            @db.VarChar(255)
  group           String            @db.VarChar(255)
  public_Absence  public_Absence[]  @ignore
  public_Document public_Document[]
  public_Parent   public_Parent     @relation(fields: [parent], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Student_fk0")
  public_Group    public_Group      @relation(fields: [group], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Student_fk1")

  @@map("public.Student")
}

model public_Subject {
  code                   String                   @id(map: "Subject_pk") @db.VarChar(255)
  full_name              String                   @db.VarChar(255)
  public_Session         public_Session[]
  public_Teacher_Subject public_Teacher_Subject[]

  @@map("public.Subject")
}

model public_Teacher {
  email                  String                   @id(map: "Teacher_pk") @db.VarChar(255)
  name                   String                   @db.VarChar(255)
  password               String                   @db.VarChar(255)
  subject                String                   @db.VarChar(255)
  public_Teacher_Group   public_Teacher_Group[]
  public_Teacher_Subject public_Teacher_Subject[]

  @@map("public.Teacher")
}

model public_Teacher_Group {
  teacher_id     String         @db.VarChar(255)
  group_id       String         @db.VarChar(255)
  public_Teacher public_Teacher @relation(fields: [teacher_id], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Group_fk0")
  public_Group   public_Group   @relation(fields: [group_id], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Group_fk1")

  @@id([teacher_id, group_id], map: "Teacher_Group_pk")
  @@map("public.Teacher_Group")
}

model public_Teacher_Subject {
  subject_id     String         @db.VarChar(255)
  teacher_id     String         @db.VarChar(255)
  public_Subject public_Subject @relation(fields: [subject_id], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Subject_fk0")
  public_Teacher public_Teacher @relation(fields: [teacher_id], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Subject_fk1")

  @@id([subject_id, teacher_id], map: "Teacher_Subject_pk")
  @@map("public.Teacher_Subject")
}
