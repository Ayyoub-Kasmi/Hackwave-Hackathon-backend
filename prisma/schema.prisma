generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Absence {
  student_email String  @db.VarChar(255)
  session_id    String  @db.VarChar(255)
  justfication  String? @db.VarChar(255)
  Student       Student @relation(fields: [student_email], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Absence_fk0")
  Session       Session @relation(fields: [session_id], references: [UUID], onDelete: NoAction, onUpdate: NoAction, map: "Absence_fk1")

  @@id([student_email, session_id], map: "Absence_pk0")
}

model Document {
  url     String  @id(map: "Document_pk") @db.VarChar(255)
  name    String  @db.VarChar(255)
  owner   String  @db.VarChar(255)
  Student Student @relation(fields: [owner], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Document_fk0")
}

model Group {
  name          String          @id(map: "Group_pk") @db.VarChar(255)
  size          Int             @default(0)
  Session       Session[]
  Student       Student[]
  Teacher_Group Teacher_Group[]
}

model Parent {
  email          String           @id(map: "Parent_pk") @db.VarChar(255)
  name           String           @db.VarChar(255)
  password       String           @db.VarChar(255)
  ParentDocument ParentDocument[]
}

model ParentDocument {
  url    String @id(map: "ParentDocument_pk") @db.VarChar(255)
  name   String @db.VarChar(255)
  owner  String @db.VarChar(255)
  Parent Parent @relation(fields: [owner], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "ParentDocument_fk0")
}

model Session {
  group_id   String    @db.VarChar(255)
  subject_id String    @db.VarChar(255)
  time       DateTime  @db.Timestamp(6)
  room       String    @db.VarChar(255)
  UUID       String    @unique @db.VarChar(255)
  Absence    Absence[]
  Group      Group     @relation(fields: [group_id], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Session_fk0")
  Subject    Subject   @relation(fields: [subject_id], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "Session_fk1")

  @@id([group_id, subject_id, time], map: "Session_pk")
}

model Student {
  email     String     @id(map: "Student_pk") @db.VarChar(255)
  firstName String     @db.VarChar(255)
  password  String     @db.VarChar(255)
  gender    String     @db.VarChar(255)
  major     String     @db.VarChar(255)
  parent    String?    @db.VarChar(255)
  group     String     @db.VarChar(255)
  level     String?    @db.VarChar(255)
  lastName  String?    @db.VarChar(255)
  phone     String?    @db.VarChar(255)
  Absence   Absence[]
  Document  Document[]
  Group     Group      @relation(fields: [group], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Student_fk1")
  Major     Major      @relation(fields: [major], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Student_fk2")
}

model Subject {
  code            String            @id(map: "Subject_pk") @db.VarChar(255)
  full_name       String            @db.VarChar(255)
  level           String?           @db.VarChar(255)
  Session         Session[]
  Teacher_Subject Teacher_Subject[]
}

model Teacher {
  email           String            @id(map: "Teacher_pk") @db.VarChar(255)
  firstName       String            @db.VarChar(255)
  password        String            @db.VarChar(255)
  phone           String?           @db.VarChar(255)
  lastname        String            @db.VarChar(255)
  Teacher_Group   Teacher_Group[]
  Teacher_Subject Teacher_Subject[]
}

model Teacher_Group {
  teacher_id String  @db.VarChar(255)
  group_id   String  @db.VarChar(255)
  Teacher    Teacher @relation(fields: [teacher_id], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Group_fk0")
  Group      Group   @relation(fields: [group_id], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Group_fk1")

  @@id([teacher_id, group_id], map: "Teacher_Group_pk")
}

model Teacher_Subject {
  subject_id String  @db.VarChar(255)
  teacher_id String  @db.VarChar(255)
  Subject    Subject @relation(fields: [subject_id], references: [code], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Subject_fk0")
  Teacher    Teacher @relation(fields: [teacher_id], references: [email], onDelete: NoAction, onUpdate: NoAction, map: "Teacher_Subject_fk1")

  @@id([subject_id, teacher_id], map: "Teacher_Subject_pk")
}

model Admin {
  email     String  @id(map: "Admin_pk") @db.VarChar(255)
  firstName String  @db.VarChar(255)
  password  String  @db.VarChar(255)
  lastName  String  @db.VarChar(255)
  phone     String? @db.VarChar(255)
}

model Major {
  name    String    @id(map: "Major_pk") @db.VarChar(255)
  Skill   Skill[]
  Student Student[]
}

model Skill {
  name     String  @id(map: "Skill_pk") @db.VarChar(255)
  major_id String? @db.VarChar(255)
  Major    Major?  @relation(fields: [major_id], references: [name], onDelete: NoAction, onUpdate: NoAction, map: "Skill_fk0")
}
